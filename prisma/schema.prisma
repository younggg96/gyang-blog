// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                 Int                 @id @default(autoincrement()) @db.UnsignedInt
  email              String              @unique
  online             Boolean             @default(false)
  username           String
  password           String
  avatar             String?
  profile            profile?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  role               String?
  articles           article[]
  moments            moment[]
  collections        collection[]
  like               like[]
  comments           comment[]
  commentLikes       commentLike[]
  momentlikes        momentLike[]
  momentComment      momentComment[]
  momentCommentLikes momentCommentLike[]
  message            message[]
  conversationUser   conversationUser[]
}

model conversation {
  id        Int                @id @default(autoincrement()) @db.UnsignedInt
  messages  message[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt
  users     conversationUser[]
}

model conversationUser {
  conversation   conversation @relation(fields: [conversationId], references: [id])
  conversationId Int          @db.UnsignedInt
  user           user         @relation(fields: [userId], references: [id])
  userId         Int          @db.UnsignedInt
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  @@id([conversationId, userId])
  @@map("conversation_user")
}

model message {
  id             Int           @id @default(autoincrement()) @db.UnsignedInt
  content        String
  createdAt      DateTime      @default(now())
  sender         user?         @relation(fields: [senderId], references: [id])
  senderId       Int?          @db.UnsignedInt
  conversation   conversation? @relation(fields: [conversationId], references: [id])
  conversationId Int?          @db.UnsignedInt
}

model profile {
  profileId     Int     @id @default(autoincrement())
  backgroundImg String?
  bio           String? @db.Text
  github        String?
  linkedin      String?
  facebook      String?
  user          user    @relation(fields: [userEmail], references: [email])
  userEmail     String  @unique
}

model category {
  id       Int               @id @default(autoincrement()) @db.UnsignedInt
  title    String
  articles articleCategory[]
}

model article {
  id           Int               @id @default(autoincrement()) @db.UnsignedInt
  title        String
  img          String?
  description  String?           @db.Text
  content      String            @db.Text
  published    Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  user         user              @relation(fields: [userId], references: [id])
  userId       Int               @db.UnsignedInt
  comments     comment[]
  like         like[]
  collection   collection?       @relation(fields: [collectionId], references: [id])
  collectionId Int?              @db.UnsignedInt
  categories   articleCategory[]
}

model comment {
  id           Int           @id @default(autoincrement()) @db.UnsignedInt
  content      String        @db.Text
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  article      article?      @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId    Int?          @db.UnsignedInt
  user         user?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int?          @db.UnsignedInt
  parent       comment?      @relation("ChildComments", fields: [parentId], references: [id])
  parentId     Int?          @db.UnsignedInt
  replies      comment[]     @relation("ChildComments")
  replyTo      Int?
  commentLikes commentLike[]
}

model commentLike {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @db.UnsignedInt
  comment   comment? @relation(fields: [commentId], references: [id])
  commentId Int?     @db.UnsignedInt

  @@map("comment_like")
}

model like {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  article   article? @relation(fields: [articleId], references: [id])
  articleId Int?     @db.UnsignedInt
  user      user?    @relation(fields: [userId], references: [id])
  userId    Int?     @db.UnsignedInt
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("article_like")
}

model moment {
  id             Int             @id @default(autoincrement()) @db.UnsignedInt
  content        String          @db.Text
  imgs           imgs[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           user?           @relation(fields: [userId], references: [id])
  userId         Int?            @db.UnsignedInt
  momentComments momentComment[]
  momentlikes    momentLike[]
}

model momentLike {
  id       Int    @id @default(autoincrement()) @db.UnsignedInt
  user     user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int    @db.UnsignedInt
  moment   moment @relation(fields: [momentId], references: [id], onDelete: Cascade)
  momentId Int    @db.UnsignedInt

  @@map("moment_like")
}

model momentComment {
  id                 Int                 @id @default(autoincrement()) @db.UnsignedInt
  content            String              @db.Text
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  moment             moment?             @relation(fields: [momentId], references: [id])
  momentId           Int?                @db.UnsignedInt
  user               user?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int?                @db.UnsignedInt
  parent             momentComment?      @relation("ChildComments", fields: [parentId], references: [id])
  parentId           Int?                @db.UnsignedInt
  replies            momentComment[]     @relation("ChildComments")
  replyTo            Int?
  momentCommentLikes momentCommentLike[]

  @@map("moment_comment")
}

model momentCommentLike {
  id              Int            @id @default(autoincrement()) @db.UnsignedInt
  user            user           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int            @db.UnsignedInt
  momentComment   momentComment? @relation(fields: [momentCommentId], references: [id])
  momentCommentId Int?           @db.UnsignedInt

  @@map("moment_comment_like")
}

model imgs {
  id       Int     @id @default(autoincrement()) @db.UnsignedInt
  url      String
  moment   moment? @relation(fields: [momentId], references: [id])
  momentId Int?    @db.UnsignedInt
}

model collection {
  id       Int       @id @default(autoincrement()) @db.UnsignedInt
  articles article[]
  user     user?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int?      @db.UnsignedInt
}

model articleCategory {
  category   category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int      @db.UnsignedInt
  article    article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId  Int      @db.UnsignedInt

  @@id([articleId, categoryId])
  @@map("article_category")
}
