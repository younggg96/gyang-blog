// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  email         String          @unique
  username      String
  password      String
  avatar        String?
  profile       profile?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          String?
  articles      article[]
  moments       moment[]
  collections   collection[]
  like          like[]
  comments      comment[]
  reply         reply[]
  momentLike    momentLike[]
  momentComment momentComment[]
}

model profile {
  profileId     Int     @id @default(autoincrement())
  backgroundImg String?
  bio           String? @db.Text
  github        String?
  linkedin      String?
  facebook      String?
  user          user    @relation(fields: [userEmail], references: [email])
  userEmail     String  @unique
}

model category {
  id       Int               @id @default(autoincrement()) @db.UnsignedInt
  title    String
  articles articleCategory[]
}

model article {
  id           Int               @id @default(autoincrement()) @db.UnsignedInt
  title        String
  img          String?
  file         String?
  description  String?           @db.Text
  content      String            @db.Text
  published    Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  user         user              @relation(fields: [userId], references: [id])
  userId       Int               @db.UnsignedInt
  categories   articleCategory[]
  comments     comment[]
  like         like[]
  collection   collection?       @relation(fields: [collectionId], references: [id])
  collectionId Int?              @db.UnsignedInt
}

model moment {
  id             Int             @id @default(autoincrement()) @db.UnsignedInt
  content        String          @db.Text
  imgs           imgs[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           user?           @relation(fields: [userId], references: [id])
  userId         Int?            @db.UnsignedInt
  momentComments momentComment[]
  momentlikes    momentLike[]
}

model momentLike {
  id       Int     @id @default(autoincrement()) @db.UnsignedInt
  status   Boolean @default(false)
  user     user?   @relation(fields: [userId], references: [id])
  userId   Int?    @db.UnsignedInt
  moment   moment? @relation(fields: [momentId], references: [id])
  momentId Int?    @db.UnsignedInt
}

model momentComment {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reply     reply[]
  user      user?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?     @db.UnsignedInt
  moment    moment?  @relation(fields: [momentId], references: [id])
  momentId  Int?     @db.UnsignedInt
}

model imgs {
  id       Int     @id @default(autoincrement()) @db.UnsignedInt
  url      String
  moment   moment? @relation(fields: [momentId], references: [id])
  momentId Int?    @db.UnsignedInt
}

model collection {
  id       Int       @id @default(autoincrement()) @db.UnsignedInt
  articles article[]
  user     user?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int?      @db.UnsignedInt
}

model articleCategory {
  category   category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int      @db.UnsignedInt
  article    article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId  Int      @db.UnsignedInt

  @@id([categoryId, articleId])
  @@map("article_category")
}

model comment {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reply     reply[]
  article   article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?     @db.UnsignedInt
  user      user?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?     @db.UnsignedInt
}

model like {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  status    Boolean  @default(false)
  article   article? @relation(fields: [articleId], references: [id])
  articleId Int?     @db.UnsignedInt
  user      user?    @relation(fields: [userId], references: [id])
  userId    Int?     @db.UnsignedInt
}

model reply {
  id              Int            @id @default(autoincrement()) @db.UnsignedInt
  content         String         @db.Text
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  comment         comment?       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId       Int?           @db.UnsignedInt
  replySelfId     Int?           @db.UnsignedInt
  user            user?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int?           @db.UnsignedInt
  momentComment   momentComment? @relation(fields: [momentCommentId], references: [id])
  momentCommentId Int?           @db.UnsignedInt
}
